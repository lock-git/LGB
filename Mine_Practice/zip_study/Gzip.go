package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
)

const featureStr = "{\"values\": [60,3241234,29,266122,72754,11394,0.16,0.869999999999999,58840,20,0,44,395511,34.7122169562927,0.878262153482706,170736,27091,947298,34.9672584991325,0,33,2,0,1,2,1,30,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,60,3241234,29,266122,72754,11394,0.16,0.869999999999999,58840,20,0,44,395511,34.7122169562927,0.878262153482706,170736,27091,947298,34.9672584991325,0,33,2,0,1,2,1,30,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0],\"rows\": 2,\"cols\": 147,\"essayIds\":[\"1111\",\"2222\"]}"

/*
GZip 压缩和解压缩 demo
*/
func main() {
	fmt.Println("原始字符串：", featureStr)
	var b bytes.Buffer
	gz := gzip.NewWriter(&b)
	if _, err := gz.Write([]byte(featureStr)); err != nil {
		panic(err)
	}
	if err := gz.Flush(); err != nil {
		panic(err)
	}
	if err := gz.Close(); err != nil {
		panic(err)
	}
	str := base64.StdEncoding.EncodeToString(b.Bytes())
	fmt.Println("GZip压缩后字符串：", str)
	fmt.Println("========================================================================================================")

	data, _ := base64.StdEncoding.DecodeString(str)
	fmt.Println("GZip压缩后字节数组：", data)
	rdata := bytes.NewReader(data)
	r, _ := gzip.NewReader(rdata)
	s, _ := ioutil.ReadAll(r)
	fmt.Println("GZip解压后字符串：", string(s))
}
